import { Component, OnInit, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { AuthService } from '../../../core/services/auth.service';

@Component({
  selector: 'app-tenant-profile',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  template: `
    <div class="p-4 lg:p-6 max-w-5xl">
      <!-- Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-white mb-1">My Profile</h1>
        <p class="text-sm text-gray-400">Manage your account settings and password</p>
      </div>

      <!-- Message Display -->
      <div *ngIf="message()" 
           [ngClass]="{
             'bg-green-900/30 border border-green-700 text-green-400': messageType() === 'success',
             'bg-red-900/30 border border-red-700 text-red-400': messageType() === 'error'
           }"
           class="p-4 rounded-lg text-sm mb-6">
        {{ message() }}
      </div>

      <!-- Tab Navigation -->
      <div class="flex gap-2 border-b border-gray-700 mb-8">
        <button 
          (click)="activeTab.set('profile')"
          type="button"
          class="px-4 py-3 font-medium text-sm transition-colors border-b-2 -mb-0.5"
          [ngClass]="{
            'border-purple-500 text-purple-400': activeTab() === 'profile',
            'border-transparent text-gray-400 hover:text-gray-300': activeTab() !== 'profile'
          }">
          üë§ Profile Information
        </button>
        <button 
          (click)="activeTab.set('password')"
          type="button"
          class="px-4 py-3 font-medium text-sm transition-colors border-b-2 -mb-0.5"
          [ngClass]="{
            'border-purple-500 text-purple-400': activeTab() === 'password',
            'border-transparent text-gray-400 hover:text-gray-300': activeTab() !== 'password'
          }">
          üîê Change Password
        </button>
      </div>

      <!-- Profile Information Tab -->
      <div *ngIf="activeTab() === 'profile'" class="space-y-6">
        <form [formGroup]="profileForm" (ngSubmit)="updateProfile()" class="space-y-6">
          
          <!-- Personal Information Section -->
          <div class="bg-gray-800/50 border border-gray-700 rounded-lg p-6">
            <h3 class="text-lg font-semibold text-white mb-4">Personal Information</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <!-- First Name -->
              <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">First Name *</label>
                <input
                  type="text"
                  formControlName="firstName"
                  class="w-full px-4 py-2.5 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:border-purple-500 focus:ring-1 focus:ring-purple-500/50 transition-colors"
                  placeholder="Enter first name"
                />
                <div *ngIf="profileForm.get('firstName')?.invalid && profileForm.get('firstName')?.touched" 
                     class="text-red-400 text-xs mt-1">
                  First name is required
                </div>
              </div>

              <!-- Last Name -->
              <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Last Name *</label>
                <input
                  type="text"
                  formControlName="lastName"
                  class="w-full px-4 py-2.5 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:border-purple-500 focus:ring-1 focus:ring-purple-500/50 transition-colors"
                  placeholder="Enter last name"
                />
                <div *ngIf="profileForm.get('lastName')?.invalid && profileForm.get('lastName')?.touched" 
                     class="text-red-400 text-xs mt-1">
                  Last name is required
                </div>
              </div>

              <!-- Email (Read-only) -->
              <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Email Address</label>
                <input
                  type="email"
                  formControlName="email"
                  readonly
                  class="w-full px-4 py-2.5 bg-gray-900 border border-gray-700 rounded-lg text-gray-400 cursor-not-allowed"
                />
                <p class="text-gray-500 text-xs mt-1">Email cannot be changed</p>
              </div>

              <!-- Phone (Optional) -->
              <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Phone Number</label>
                <input
                  type="tel"
                  formControlName="phone"
                  class="w-full px-4 py-2.5 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:border-purple-500 focus:ring-1 focus:ring-purple-500/50 transition-colors"
                  placeholder="+63 (2) XXXX-XXXX"
                />
              </div>
            </div>
          </div>

          <!-- Role Information Section -->
          <div class="bg-gray-800/50 border border-gray-700 rounded-lg p-6">
            <h3 class="text-lg font-semibold text-white mb-4">Role Information</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <!-- Role (Read-only) -->
              <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Your Role</label>
                <input
                  type="text"
                  formControlName="role"
                  readonly
                  class="w-full px-4 py-2.5 bg-gray-900 border border-gray-700 rounded-lg text-gray-400 cursor-not-allowed"
                />
                <p class="text-gray-500 text-xs mt-1">Contact administrator to change your role</p>
              </div>
            </div>
          </div>

          <!-- Save Button -->
          <div class="flex justify-end gap-3 pt-4">
            <button
              type="button"
              (click)="resetForm()"
              class="px-6 py-2.5 bg-gray-700 hover:bg-gray-600 text-white font-medium rounded-lg transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              [disabled]="!profileForm.valid || savingProfile()"
              class="px-6 py-2.5 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-medium rounded-lg transition-colors"
            >
              {{ savingProfile() ? '‚è≥ Updating...' : 'üíæ Update Profile' }}
            </button>
          </div>
        </form>
      </div>

      <!-- Change Password Tab -->
      <div *ngIf="activeTab() === 'password'" class="space-y-6">
        <div class="bg-blue-900/20 border border-blue-700 rounded-lg p-4 text-sm text-blue-300">
          <div class="flex gap-3">
            <div class="flex-shrink-0">‚ÑπÔ∏è</div>
            <div>After changing your password, you will need to log in again with your new password.</div>
          </div>
        </div>

        <form [formGroup]="passwordForm" (ngSubmit)="changePassword()" class="space-y-6">
          <!-- Password Change Section -->
          <div class="bg-gray-800/50 border border-gray-700 rounded-lg p-6">
            <h3 class="text-lg font-semibold text-white mb-4">Change Password</h3>
            <div class="space-y-4">
              <!-- Current Password -->
              <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Current Password *</label>
                <input
                  type="password"
                  formControlName="currentPassword"
                  class="w-full px-4 py-2.5 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:border-purple-500 focus:ring-1 focus:ring-purple-500/50 transition-colors"
                  placeholder="Enter current password"
                />
                <div *ngIf="passwordForm.get('currentPassword')?.invalid && passwordForm.get('currentPassword')?.touched" 
                     class="text-red-400 text-xs mt-1">
                  Current password is required
                </div>
              </div>

              <!-- New Password -->
              <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">New Password *</label>
                <input
                  type="password"
                  formControlName="newPassword"
                  class="w-full px-4 py-2.5 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:border-purple-500 focus:ring-1 focus:ring-purple-500/50 transition-colors"
                  placeholder="Enter new password (min 8 characters)"
                />
                <div *ngIf="passwordForm.get('newPassword')?.invalid && passwordForm.get('newPassword')?.touched" 
                     class="text-red-400 text-xs mt-1">
                  Password must be at least 8 characters
                </div>
              </div>

              <!-- Confirm Password -->
              <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Confirm New Password *</label>
                <input
                  type="password"
                  formControlName="confirmPassword"
                  class="w-full px-4 py-2.5 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:border-purple-500 focus:ring-1 focus:ring-purple-500/50 transition-colors"
                  placeholder="Confirm new password"
                />
                <div *ngIf="passwordForm.hasError('mismatch') && passwordForm.get('confirmPassword')?.touched" 
                     class="text-red-400 text-xs mt-1">
                  Passwords do not match
                </div>
              </div>
            </div>
          </div>

          <!-- Change Password Button -->
          <div class="flex justify-end gap-3 pt-4">
            <button
              type="button"
              (click)="resetPasswordForm()"
              class="px-6 py-2.5 bg-gray-700 hover:bg-gray-600 text-white font-medium rounded-lg transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              [disabled]="!passwordForm.valid || changingPassword()"
              class="px-6 py-2.5 bg-red-600 hover:bg-red-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-medium rounded-lg transition-colors"
            >
              {{ changingPassword() ? '‚è≥ Changing...' : 'üîê Change Password' }}
            </button>
          </div>
        </form>
      </div>
    </div>
  `,
  styles: []
})
export class TenantProfileComponent implements OnInit {
  profileForm: FormGroup;
  passwordForm: FormGroup;
  savingProfile = signal(false);
  changingPassword = signal(false);
  message = signal('');
  messageType = signal<'success' | 'error'>('success');
  activeTab = signal<'profile' | 'password'>('profile');

  constructor(
    private fb: FormBuilder,
    private authService: AuthService
  ) {
    this.profileForm = this.fb.group({
      name: ['', Validators.required],
      email: [{ value: '', disabled: true }],
      phone: [''],
      role: [{ value: '', disabled: true }]
    });

    this.passwordForm = this.fb.group({
      currentPassword: ['', Validators.required],
      newPassword: ['', [Validators.required, Validators.minLength(8)]],
      confirmPassword: ['', Validators.required]
    }, { validators: this.passwordMatchValidator });
  }

  ngOnInit(): void {
    this.loadUserProfile();
  }

  loadUserProfile(): void {
    const user = this.authService.getCurrentUser();
    if (user) {
      const fullName = `${user.firstName || ''} ${user.lastName || ''}`.trim();
      this.profileForm.patchValue({
        name: fullName || user.email,
        email: user.email,
        phone: '',
        role: user.role || 'User'
      });
    }
  }

  updateProfile(): void {
    if (this.profileForm.invalid) return;

    this.savingProfile.set(true);
    this.message.set('');
    const formValue = this.profileForm.getRawValue();

    // Simulate API call
    setTimeout(() => {
      console.log('‚úÖ Profile would be updated');
      this.message.set('Profile updated successfully!');
      this.messageType.set('success');
      this.savingProfile.set(false);
      setTimeout(() => this.message.set(''), 3000);
    }, 500);
  }

  changePassword(): void {
    if (this.passwordForm.invalid) return;

    this.changingPassword.set(true);
    this.message.set('');

    // Simulate API call
    setTimeout(() => {
      console.log('‚úÖ Password would be changed');
      this.message.set('Password changed successfully! Please log in again.');
      this.messageType.set('success');
      this.passwordForm.reset();
      this.changingPassword.set(false);
      setTimeout(() => this.message.set(''), 3000);
    }, 500);
  }

  passwordMatchValidator(group: FormGroup): { [key: string]: boolean } | null {
    const newPassword = group.get('newPassword')?.value;
    const confirmPassword = group.get('confirmPassword')?.value;
    
    if (newPassword && confirmPassword && newPassword !== confirmPassword) {
      return { mismatch: true };
    }
    return null;
  }
}
